package main

import (
	"time"

	"github.com/spf13/viper"

	"github.com/rs/zerolog/log"

	"github.com/goccy/go-json"

	"github.com/gofiber/swagger"
	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/Scrip7/imdb-api/docs"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cache"
	"github.com/gofiber/fiber/v2/middleware/compress"

	"github.com/Scrip7/imdb-api/config"
	"github.com/Scrip7/imdb-api/routes/title"
	"github.com/Scrip7/imdb-api/server"
)

// @title        IMDb-API
// @description  Cross-platform microservice to scrape the IMDb website.
// @accept       json
// @produce      json
// @contact.url  https://github.com/Scrip7/imdb-api
// @contact.name Repository
// @license.name MIT license
// @license.url  https://github.com/Scrip7/imdb-api/blob/main/LICENSE
func main() {
	config.LoadENV()
	config.RegisterLogger()

	app := fiber.New(fiber.Config{
		JSONEncoder:       json.Marshal,
		JSONDecoder:       json.Unmarshal,
		Prefork:           viper.GetBool("PREFORK"),
		EnablePrintRoutes: viper.GetBool("PRINT_ROUTES"),
		GETOnly:           true,
		ErrorHandler:      server.ErrorHandler,
	})

	app.Get("/swagger/*", swagger.HandlerDefault)

	app.Use(compress.New(compress.Config{
		Level: compress.LevelBestSpeed,
	}))

	// Cache middleware
	app.Use(cache.New(cache.Config{
		Next: func(c *fiber.Ctx) bool {
			return c.Query("refresh") != "" && c.GetReqHeaders()["Refresh"] != ""
		},
		CacheHeader:          "X-Cache",
		Expiration:           viper.GetDuration("CACHE_DURATION") * time.Millisecond,
		StoreResponseHeaders: false,
		CacheControl:         false,
		MaxBytes:             viper.GetUint("CACHE_MAX_BYTES"),
	}))

	t := app.Group("/title/:id")
	t.Get("/", title.Index)

	// Not found error handler
	app.Use(func(c *fiber.Ctx) error {
		return fiber.NewError(fiber.StatusNotFound, "Not found")
	})

	log.Info().Str("addr", viper.GetString("SERVER_ADDR")).Msg("Starting the HTTP server")
	log.Fatal().Err(app.Listen(viper.GetString("SERVER_ADDR"))).Msg("Failed to start the HTTP server")
}
